{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountFactory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract IEntryPoint",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COST_OF_POST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IPaymaster.PostOpMode",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "name": "postOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "theFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxCost",
          "type": "uint256"
        }
      ],
      "name": "validatePaymasterUserOp",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60c06040523480156200001157600080fd5b5060405162001c3538038062001c35833981016040819052620000349162000327565b8180826200004233620000a0565b6001600160a01b031660805260046200005c8382620004b2565b5060056200006b8282620004b2565b5050506001600160a01b03831660a05262000088306001620000f0565b620000973033600019620001b9565b505050620005a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166200014c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600360008282546200016091906200057e565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0383166200021d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162000143565b6001600160a01b038216620002805760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000143565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b505050565b6001600160a01b0381168114620002fc57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80516200032281620002e6565b919050565b6000806000606084860312156200033d57600080fd5b83516200034a81620002e6565b602085810151919450906001600160401b03808211156200036a57600080fd5b818701915087601f8301126200037f57600080fd5b815181811115620003945762000394620002ff565b604051601f8201601f19908116603f01168101908382118183101715620003bf57620003bf620002ff565b816040528281528a86848701011115620003d857600080fd5b600093505b82841015620003fc5784840186015181850187015292850192620003dd565b60008684830101528097505050505050506200041b6040850162000315565b90509250925092565b600181811c908216806200043957607f821691505b6020821081036200045a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002e157600081815260208120601f850160051c81016020861015620004895750805b601f850160051c820191505b81811015620004aa5782815560010162000495565b505050505050565b81516001600160401b03811115620004ce57620004ce620002ff565b620004e681620004df845462000424565b8462000460565b602080601f8311600181146200051e5760008415620005055750858301515b600019600386901b1c1916600185901b178555620004aa565b600085815260208120601f198616915b828110156200054f578886015182559484019460019091019084016200052e565b50858210156200056e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620005a057634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a051611631620006046000396000818161034b01526111d90152600081816103df0152818161050301528181610646015281816107a501528181610839015281816108b00152818161093d0152610e2401526116316000f3fe6080604052600436106101815760003560e01c80639f5ca221116100d1578063c23a5cea1161008a578063dd62ed3e11610064578063dd62ed3e14610453578063f0dda65c14610473578063f2fde38b14610493578063f465c77e146104b357600080fd5b8063c23a5cea14610416578063c399ec8814610436578063d0e30db01461044b57600080fd5b80639f5ca22114610339578063a457c2d71461036d578063a9059cbb1461038d578063a9a23409146103ad578063b0d691fe146103cd578063bb9fe6bf1461040157600080fd5b8063313ce5671161013e578063715018a611610118578063715018a6146102c7578063796d4371146102dc5780638da5cb5b146102f257806395d89b411461032457600080fd5b8063313ce56714610255578063395093511461027157806370a082311461029157600080fd5b80630396cb601461018657806306fdde031461019b578063095ea7b3146101c657806318160ddd146101f6578063205c28781461021557806323b872dd14610235575b600080fd5b610199610194366004611255565b6104e1565b005b3480156101a757600080fd5b506101b061056c565b6040516101bd91906112c8565b60405180910390f35b3480156101d257600080fd5b506101e66101e13660046112f0565b6105fe565b60405190151581526020016101bd565b34801561020257600080fd5b506003545b6040519081526020016101bd565b34801561022157600080fd5b506101996102303660046112f0565b610618565b34801561024157600080fd5b506101e661025036600461131c565b61068a565b34801561026157600080fd5b50604051601281526020016101bd565b34801561027d57600080fd5b506101e661028c3660046112f0565b6106ae565b34801561029d57600080fd5b506102076102ac36600461135d565b6001600160a01b031660009081526001602052604090205490565b3480156102d357600080fd5b506101996106d0565b3480156102e857600080fd5b50610207613a9881565b3480156102fe57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101bd565b34801561033057600080fd5b506101b06106e4565b34801561034557600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037957600080fd5b506101e66103883660046112f0565b6106f3565b34801561039957600080fd5b506101e66103a83660046112f0565b610773565b3480156103b957600080fd5b506101996103c836600461137a565b610781565b3480156103d957600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040d57600080fd5b5061019961079b565b34801561042257600080fd5b5061019961043136600461135d565b610812565b34801561044257600080fd5b50610207610898565b610199610928565b34801561045f57600080fd5b5061020761046e366004611409565b61098a565b34801561047f57600080fd5b5061019961048e3660046112f0565b6109b5565b34801561049f57600080fd5b506101996104ae36600461135d565b6109cb565b3480156104bf57600080fd5b506104d36104ce366004611442565b610a09565b6040516101bd929190611496565b6104e9610a2c565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050505050565b60606004805461057b906114b8565b80601f01602080910402602001604051908101604052809291908181526020018280546105a7906114b8565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050905090565b60003361060c818585610a86565b60019150505b92915050565b610620610a2c565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b15801561055057600080fd5b600033610698858285610baa565b6106a3858585610c1e565b506001949350505050565b60003361060c8185856106c1838361098a565b6106cb91906114f2565b610a86565b6106d8610a2c565b6106e26000610dc9565b565b60606005805461057b906114b8565b60003381610701828661098a565b9050838110156107665760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6106a38286868403610a86565b60003361060c818585610c1e565b610789610e19565b61079584848484610e89565b50505050565b6107a3610a2c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107fe57600080fd5b505af1158015610795573d6000803e3d6000fd5b61081a610a2c565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b15801561087d57600080fd5b505af1158015610891573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611513565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b15801561087d57600080fd5b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6109bd610a2c565b6109c78282610ebc565b5050565b6109d3610a2c565b6109f0306109e96000546001600160a01b031690565b6000610a86565b6109f981610f7d565b610a063082600019610a86565b50565b60606000610a15610e19565b610a20858585610ff3565b91509150935093915050565b6000546001600160a01b031633146106e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075d565b6001600160a01b038316610ae85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161075d565b6001600160a01b038216610b495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161075d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610bb6848461098a565b905060001981146107955781811015610c115760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161075d565b6107958484848403610a86565b6001600160a01b038316610c825760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161075d565b6001600160a01b038216610ce45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161075d565b6001600160a01b03831660009081526001602052604090205481811015610d5c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161075d565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610dbc9086815260200190565b60405180910390a3610795565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e25760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b604482015260640161075d565b6000610e978385018561135d565b90506000610eaf610eaa613a98856114f2565b611196565b9050610564823083610c1e565b6001600160a01b038216610f125760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161075d565b8060036000828254610f2491906114f2565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b610f85610a2c565b6001600160a01b038116610fea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075d565b610a0681610dc9565b606060008061100184611196565b9050613a988660a00135116110675760405162461bcd60e51b815260206004820152602660248201527f546f6b656e5061796d61737465723a2067617320746f6f206c6f7720666f72206044820152650706f73744f760d41b606482015260840161075d565b611074604087018761152c565b1590506110f857611084866111a3565b806110956102ac602089018961135d565b10156110f35760405162461bcd60e51b815260206004820152602760248201527f546f6b656e5061796d61737465723a206e6f2062616c616e636520287072652d6044820152666372656174652960c81b606482015260840161075d565b611157565b806111096102ac602089018961135d565b10156111575760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e5061796d61737465723a206e6f2062616c616e6365000000000000604482015260640161075d565b611164602087018761135d565b604080516001600160a01b0390921660208301520160408051601f198184030181529190529660009650945050505050565b600061061260648361157a565b60006111b2604083018361152c565b6111c19160149160009161159c565b6111ca916115c6565b60601c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146109c75760405162461bcd60e51b815260206004820152602560248201527f546f6b656e5061796d61737465723a2077726f6e67206163636f756e7420666160448201526463746f727960d81b606482015260840161075d565b60006020828403121561126757600080fd5b813563ffffffff8116811461127b57600080fd5b9392505050565b6000815180845260005b818110156112a85760208185018101518683018201520161128c565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061127b6020830184611282565b6001600160a01b0381168114610a0657600080fd5b6000806040838503121561130357600080fd5b823561130e816112db565b946020939093013593505050565b60008060006060848603121561133157600080fd5b833561133c816112db565b9250602084013561134c816112db565b929592945050506040919091013590565b60006020828403121561136f57600080fd5b813561127b816112db565b6000806000806060858703121561139057600080fd5b84356003811061139f57600080fd5b9350602085013567ffffffffffffffff808211156113bc57600080fd5b818701915087601f8301126113d057600080fd5b8135818111156113df57600080fd5b8860208285010111156113f157600080fd5b95986020929092019750949560400135945092505050565b6000806040838503121561141c57600080fd5b8235611427816112db565b91506020830135611437816112db565b809150509250929050565b60008060006060848603121561145757600080fd5b833567ffffffffffffffff81111561146e57600080fd5b8401610160818703121561148157600080fd5b95602085013595506040909401359392505050565b6040815260006114a96040830185611282565b90508260208301529392505050565b600181811c908216806114cc57607f821691505b6020821081036114ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561061257634e487b7160e01b600052601160045260246000fd5b60006020828403121561152557600080fd5b5051919050565b6000808335601e1984360301811261154357600080fd5b83018035915067ffffffffffffffff82111561155e57600080fd5b60200191503681900382131561157357600080fd5b9250929050565b60008261159757634e487b7160e01b600052601260045260246000fd5b500490565b600080858511156115ac57600080fd5b838611156115b957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156115f35780818660140360031b1b83161692505b50509291505056fea2646970667358221220678fe4c45c88e3912882a2be2e2c7c6ee6e1709236e9617b581a53fdb24012c864736f6c63430008130033",
    "sourceMap": "1212:4308:16:-:0;;;1402:377;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1492:7;;1524:11;936:32:31;719:10:50;936:18:31;:32::i;:::-;-1:-1:-1;;;;;564:24:1;;;2046:5:42;:13;2054:5;2046;:13;:::i;:::-;-1:-1:-1;2069:7:42;:17;2079:7;2069;:17;:::i;:::-;-1:-1:-1;;;;;;;;1547:27:16;::::2;;::::0;1612:23:::2;1626:4;1633:1;1612:5;:23::i;:::-;1721:51;1738:4;1745:10;-1:-1:-1::0;;1721:8:16::2;:51::i;:::-;1402:377:::0;;;1212:4308;;2426:187:31;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:31;;;-1:-1:-1;;;;;;2534:17:31;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;8520:535:42:-;-1:-1:-1;;;;;8603:21:42;;8595:65;;;;-1:-1:-1;;;8595:65:42;;4522:2:58;8595:65:42;;;4504:21:58;4561:2;4541:18;;;4534:30;4600:33;4580:18;;;4573:61;4651:18;;8595:65:42;;;;;;;;;8747:6;8731:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8899:18:42;;;;;;:9;:18;;;;;;;;:28;;;;;;8952:37;5053:25:58;;;8952:37:42;;5026:18:58;8952:37:42;;;;;;;8520:535;;:::o;10457:340::-;-1:-1:-1;;;;;10558:19:42;;10550:68;;;;-1:-1:-1;;;10550:68:42;;5291:2:58;10550:68:42;;;5273:21:58;5330:2;5310:18;;;5303:30;5369:34;5349:18;;;5342:62;-1:-1:-1;;;5420:18:58;;;5413:34;5464:19;;10550:68:42;5089:400:58;10550:68:42;-1:-1:-1;;;;;10636:21:42;;10628:68;;;;-1:-1:-1;;;10628:68:42;;5696:2:58;10628:68:42;;;5678:21:58;5735:2;5715:18;;;5708:30;5774:34;5754:18;;;5747:62;-1:-1:-1;;;5825:18:58;;;5818:32;5867:19;;10628:68:42;5494:398:58;10628:68:42;-1:-1:-1;;;;;10707:18:42;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10758:32;;5053:25:58;;;10758:32:42;;5026:18:58;10758:32:42;;;;;;;10457:340;;;:::o;12073:91::-;;;;:::o;14:131:58:-;-1:-1:-1;;;;;89:31:58;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:127::-;211:10;206:3;202:20;199:1;192:31;242:4;239:1;232:15;266:4;263:1;256:15;282:151;374:13;;396:31;374:13;396:31;:::i;:::-;282:151;;;:::o;438:1288::-;556:6;564;572;625:2;613:9;604:7;600:23;596:32;593:52;;;641:1;638;631:12;593:52;673:9;667:16;692:31;717:5;692:31;:::i;:::-;766:2;797:18;;;791:25;742:5;;-1:-1:-1;766:2:58;-1:-1:-1;;;;;865:14:58;;;862:34;;;892:1;889;882:12;862:34;930:6;919:9;915:22;905:32;;975:7;968:4;964:2;960:13;956:27;946:55;;997:1;994;987:12;946:55;1026:2;1020:9;1048:2;1044;1041:10;1038:36;;;1054:18;;:::i;:::-;1129:2;1123:9;1097:2;1183:13;;-1:-1:-1;;1179:22:58;;;1203:2;1175:31;1171:40;1159:53;;;1227:18;;;1247:22;;;1224:46;1221:72;;;1273:18;;:::i;:::-;1313:10;1309:2;1302:22;1348:2;1340:6;1333:18;1388:7;1383:2;1378;1374;1370:11;1366:20;1363:33;1360:53;;;1409:1;1406;1399:12;1360:53;1431:1;1422:10;;1441:129;1455:2;1452:1;1449:9;1441:129;;;1543:10;;;1539:19;;1533:26;1512:14;;;1508:23;;1501:59;1466:10;;;;1441:129;;;1612:1;1607:2;1602;1594:6;1590:15;1586:24;1579:35;1633:6;1623:16;;;;;;;;1658:62;1716:2;1705:9;1701:18;1658:62;:::i;:::-;1648:72;;438:1288;;;;;:::o;1731:380::-;1810:1;1806:12;;;;1853;;;1874:61;;1928:4;1920:6;1916:17;1906:27;;1874:61;1981:2;1973:6;1970:14;1950:18;1947:38;1944:161;;2027:10;2022:3;2018:20;2015:1;2008:31;2062:4;2059:1;2052:15;2090:4;2087:1;2080:15;1944:161;;1731:380;;;:::o;2242:545::-;2344:2;2339:3;2336:11;2333:448;;;2380:1;2405:5;2401:2;2394:17;2450:4;2446:2;2436:19;2520:2;2508:10;2504:19;2501:1;2497:27;2491:4;2487:38;2556:4;2544:10;2541:20;2538:47;;;-1:-1:-1;2579:4:58;2538:47;2634:2;2629:3;2625:12;2622:1;2618:20;2612:4;2608:31;2598:41;;2689:82;2707:2;2700:5;2697:13;2689:82;;;2752:17;;;2733:1;2722:13;2689:82;;;2693:3;;;2242:545;;;:::o;2963:1352::-;3083:10;;-1:-1:-1;;;;;3105:30:58;;3102:56;;;3138:18;;:::i;:::-;3167:97;3257:6;3217:38;3249:4;3243:11;3217:38;:::i;:::-;3211:4;3167:97;:::i;:::-;3319:4;;3383:2;3372:14;;3400:1;3395:663;;;;4102:1;4119:6;4116:89;;;-1:-1:-1;4171:19:58;;;4165:26;4116:89;-1:-1:-1;;2920:1:58;2916:11;;;2912:24;2908:29;2898:40;2944:1;2940:11;;;2895:57;4218:81;;3365:944;;3395:663;2189:1;2182:14;;;2226:4;2213:18;;-1:-1:-1;;3431:20:58;;;3549:236;3563:7;3560:1;3557:14;3549:236;;;3652:19;;;3646:26;3631:42;;3744:27;;;;3712:1;3700:14;;;;3579:19;;3549:236;;;3553:3;3813:6;3804:7;3801:19;3798:201;;;3874:19;;;3868:26;-1:-1:-1;;3957:1:58;3953:14;;;3969:3;3949:24;3945:37;3941:42;3926:58;3911:74;;3798:201;-1:-1:-1;;;;;4045:1:58;4029:14;;;4025:22;4012:36;;-1:-1:-1;2963:1352:58:o;4680:222::-;4745:9;;;4766:10;;;4763:133;;;4818:10;4813:3;4809:20;4806:1;4799:31;4853:4;4850:1;4843:15;4881:4;4878:1;4871:15;4763:133;4680:222;;;;:::o;5494:398::-;1212:4308:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101815760003560e01c80639f5ca221116100d1578063c23a5cea1161008a578063dd62ed3e11610064578063dd62ed3e14610453578063f0dda65c14610473578063f2fde38b14610493578063f465c77e146104b357600080fd5b8063c23a5cea14610416578063c399ec8814610436578063d0e30db01461044b57600080fd5b80639f5ca22114610339578063a457c2d71461036d578063a9059cbb1461038d578063a9a23409146103ad578063b0d691fe146103cd578063bb9fe6bf1461040157600080fd5b8063313ce5671161013e578063715018a611610118578063715018a6146102c7578063796d4371146102dc5780638da5cb5b146102f257806395d89b411461032457600080fd5b8063313ce56714610255578063395093511461027157806370a082311461029157600080fd5b80630396cb601461018657806306fdde031461019b578063095ea7b3146101c657806318160ddd146101f6578063205c28781461021557806323b872dd14610235575b600080fd5b610199610194366004611255565b6104e1565b005b3480156101a757600080fd5b506101b061056c565b6040516101bd91906112c8565b60405180910390f35b3480156101d257600080fd5b506101e66101e13660046112f0565b6105fe565b60405190151581526020016101bd565b34801561020257600080fd5b506003545b6040519081526020016101bd565b34801561022157600080fd5b506101996102303660046112f0565b610618565b34801561024157600080fd5b506101e661025036600461131c565b61068a565b34801561026157600080fd5b50604051601281526020016101bd565b34801561027d57600080fd5b506101e661028c3660046112f0565b6106ae565b34801561029d57600080fd5b506102076102ac36600461135d565b6001600160a01b031660009081526001602052604090205490565b3480156102d357600080fd5b506101996106d0565b3480156102e857600080fd5b50610207613a9881565b3480156102fe57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101bd565b34801561033057600080fd5b506101b06106e4565b34801561034557600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037957600080fd5b506101e66103883660046112f0565b6106f3565b34801561039957600080fd5b506101e66103a83660046112f0565b610773565b3480156103b957600080fd5b506101996103c836600461137a565b610781565b3480156103d957600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040d57600080fd5b5061019961079b565b34801561042257600080fd5b5061019961043136600461135d565b610812565b34801561044257600080fd5b50610207610898565b610199610928565b34801561045f57600080fd5b5061020761046e366004611409565b61098a565b34801561047f57600080fd5b5061019961048e3660046112f0565b6109b5565b34801561049f57600080fd5b506101996104ae36600461135d565b6109cb565b3480156104bf57600080fd5b506104d36104ce366004611442565b610a09565b6040516101bd929190611496565b6104e9610a2c565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050505050565b60606004805461057b906114b8565b80601f01602080910402602001604051908101604052809291908181526020018280546105a7906114b8565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050905090565b60003361060c818585610a86565b60019150505b92915050565b610620610a2c565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b15801561055057600080fd5b600033610698858285610baa565b6106a3858585610c1e565b506001949350505050565b60003361060c8185856106c1838361098a565b6106cb91906114f2565b610a86565b6106d8610a2c565b6106e26000610dc9565b565b60606005805461057b906114b8565b60003381610701828661098a565b9050838110156107665760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6106a38286868403610a86565b60003361060c818585610c1e565b610789610e19565b61079584848484610e89565b50505050565b6107a3610a2c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107fe57600080fd5b505af1158015610795573d6000803e3d6000fd5b61081a610a2c565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b15801561087d57600080fd5b505af1158015610891573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611513565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b15801561087d57600080fd5b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6109bd610a2c565b6109c78282610ebc565b5050565b6109d3610a2c565b6109f0306109e96000546001600160a01b031690565b6000610a86565b6109f981610f7d565b610a063082600019610a86565b50565b60606000610a15610e19565b610a20858585610ff3565b91509150935093915050565b6000546001600160a01b031633146106e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075d565b6001600160a01b038316610ae85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161075d565b6001600160a01b038216610b495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161075d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610bb6848461098a565b905060001981146107955781811015610c115760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161075d565b6107958484848403610a86565b6001600160a01b038316610c825760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161075d565b6001600160a01b038216610ce45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161075d565b6001600160a01b03831660009081526001602052604090205481811015610d5c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161075d565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610dbc9086815260200190565b60405180910390a3610795565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e25760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b604482015260640161075d565b6000610e978385018561135d565b90506000610eaf610eaa613a98856114f2565b611196565b9050610564823083610c1e565b6001600160a01b038216610f125760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161075d565b8060036000828254610f2491906114f2565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b610f85610a2c565b6001600160a01b038116610fea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075d565b610a0681610dc9565b606060008061100184611196565b9050613a988660a00135116110675760405162461bcd60e51b815260206004820152602660248201527f546f6b656e5061796d61737465723a2067617320746f6f206c6f7720666f72206044820152650706f73744f760d41b606482015260840161075d565b611074604087018761152c565b1590506110f857611084866111a3565b806110956102ac602089018961135d565b10156110f35760405162461bcd60e51b815260206004820152602760248201527f546f6b656e5061796d61737465723a206e6f2062616c616e636520287072652d6044820152666372656174652960c81b606482015260840161075d565b611157565b806111096102ac602089018961135d565b10156111575760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e5061796d61737465723a206e6f2062616c616e6365000000000000604482015260640161075d565b611164602087018761135d565b604080516001600160a01b0390921660208301520160408051601f198184030181529190529660009650945050505050565b600061061260648361157a565b60006111b2604083018361152c565b6111c19160149160009161159c565b6111ca916115c6565b60601c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146109c75760405162461bcd60e51b815260206004820152602560248201527f546f6b656e5061796d61737465723a2077726f6e67206163636f756e7420666160448201526463746f727960d81b606482015260840161075d565b60006020828403121561126757600080fd5b813563ffffffff8116811461127b57600080fd5b9392505050565b6000815180845260005b818110156112a85760208185018101518683018201520161128c565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061127b6020830184611282565b6001600160a01b0381168114610a0657600080fd5b6000806040838503121561130357600080fd5b823561130e816112db565b946020939093013593505050565b60008060006060848603121561133157600080fd5b833561133c816112db565b9250602084013561134c816112db565b929592945050506040919091013590565b60006020828403121561136f57600080fd5b813561127b816112db565b6000806000806060858703121561139057600080fd5b84356003811061139f57600080fd5b9350602085013567ffffffffffffffff808211156113bc57600080fd5b818701915087601f8301126113d057600080fd5b8135818111156113df57600080fd5b8860208285010111156113f157600080fd5b95986020929092019750949560400135945092505050565b6000806040838503121561141c57600080fd5b8235611427816112db565b91506020830135611437816112db565b809150509250929050565b60008060006060848603121561145757600080fd5b833567ffffffffffffffff81111561146e57600080fd5b8401610160818703121561148157600080fd5b95602085013595506040909401359392505050565b6040815260006114a96040830185611282565b90508260208301529392505050565b600181811c908216806114cc57607f821691505b6020821081036114ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561061257634e487b7160e01b600052601160045260246000fd5b60006020828403121561152557600080fd5b5051919050565b6000808335601e1984360301811261154357600080fd5b83018035915067ffffffffffffffff82111561155e57600080fd5b60200191503681900382131561157357600080fd5b9250929050565b60008261159757634e487b7160e01b600052601260045260246000fd5b500490565b600080858511156115ac57600080fd5b838611156115b957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156115f35780818660140360031b1b83161692505b50509291505056fea2646970667358221220678fe4c45c88e3912882a2be2e2c7c6ee6e1709236e9617b581a53fdb24012c864736f6c63430008130033",
    "sourceMap": "1212:4308:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3094:141:1;;;;;;:::i;:::-;;:::i;:::-;;2158:98:42;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4444:197;;;;;;;;;;-1:-1:-1;4444:197:42;;;;;:::i;:::-;;:::i;:::-;;;1569:14:58;;1562:22;1544:41;;1532:2;1517:18;4444:197:42;1404:187:58;3255:106:42;;;;;;;;;;-1:-1:-1;3342:12:42;;3255:106;;;1742:25:58;;;1730:2;1715:18;3255:106:42;1596:177:58;2721:149:1;;;;;;;;;;-1:-1:-1;2721:149:1;;;;;:::i;:::-;;:::i;5203:256:42:-;;;;;;;;;;-1:-1:-1;5203:256:42;;;;;:::i;:::-;;:::i;3104:91::-;;;;;;;;;;-1:-1:-1;3104:91:42;;3186:2;2709:36:58;;2697:2;2682:18;3104:91:42;2567:184:58;5854:234:42;;;;;;;;;;-1:-1:-1;5854:234:42;;;;;:::i;:::-;;:::i;3419:125::-;;;;;;;;;;-1:-1:-1;3419:125:42;;;;;:::i;:::-;-1:-1:-1;;;;;3519:18:42;3493:7;3519:18;;;:9;:18;;;;;;;3419:125;1824:101:31;;;;;;;;;;;;;:::i;1309:44:16:-;;;;;;;;;;;;1348:5;1309:44;;1201:85:31;;;;;;;;;;-1:-1:-1;1247:7:31;1273:6;-1:-1:-1;;;;;1273:6:31;1201:85;;;-1:-1:-1;;;;;3172:32:58;;;3154:51;;3142:2;3127:18;1201:85:31;3008:203:58;2369:102:42;;;;;;;;;;;;;:::i;1360:35:16:-;;;;;;;;;;;;;;;6575:427:42;;;;;;;;;;-1:-1:-1;6575:427:42;;;;;:::i;:::-;;:::i;3740:189::-;;;;;;;;;;-1:-1:-1;3740:189:42;;;;;:::i;:::-;;:::i;1143:186:1:-;;;;;;;;;;-1:-1:-1;1143:186:1;;;;;:::i;:::-;;:::i;471:39::-;;;;;;;;;;;;;;;3588:83;;;;;;;;;;;;;:::i;3890:133::-;;;;;;;;;;-1:-1:-1;3890:133:1;;;;;:::i;:::-;;:::i;3318:111::-;;;;;;;;;;;;;:::i;2474:105::-;;;:::i;3987:149:42:-;;;;;;;;;;-1:-1:-1;3987:149:42;;;;;:::i;:::-;;:::i;1983:115:16:-;;;;;;;;;;-1:-1:-1;1983:115:16;;;;;:::i;:::-;;:::i;2341:358::-;;;;;;;;;;-1:-1:-1;2341:358:16;;;;;:::i;:::-;;:::i;632:290:1:-;;;;;;;;;;-1:-1:-1;632:290:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3094:141::-;1094:13:31;:11;:13::i;:::-;3173:55:1::1;::::0;-1:-1:-1;;;3173:55:1;;5922:10:58;5910:23;;3173:55:1::1;::::0;::::1;5892:42:58::0;3173:10:1::1;-1:-1:-1::0;;;;;3173:19:1::1;::::0;::::1;::::0;3201:9:::1;::::0;5865:18:58;;3173:55:1::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;3094:141:::0;:::o;2158:98:42:-;2212:13;2244:5;2237:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98;:::o;4444:197::-;4527:4;719:10:50;4581:32:42;719:10:50;4597:7:42;4606:6;4581:8;:32::i;:::-;4630:4;4623:11;;;4444:197;;;;;:::o;2721:149:1:-;1094:13:31;:11;:13::i;:::-;2817:46:1::1;::::0;-1:-1:-1;;;2817:46:1;;-1:-1:-1;;;;;6538:32:58;;;2817:46:1::1;::::0;::::1;6520:51:58::0;6587:18;;;6580:34;;;2817:10:1::1;:21;::::0;::::1;::::0;6493:18:58;;2817:46:1::1;;;;;;;;;;;;;;;;;::::0;::::1;5203:256:42::0;5300:4;719:10:50;5356:38:42;5372:4;719:10:50;5387:6:42;5356:15;:38::i;:::-;5404:27;5414:4;5420:2;5424:6;5404:9;:27::i;:::-;-1:-1:-1;5448:4:42;;5203:256;-1:-1:-1;;;;5203:256:42:o;5854:234::-;5942:4;719:10:50;5996:64:42;719:10:50;6012:7:42;6049:10;6021:25;719:10:50;6012:7:42;6021:9;:25::i;:::-;:38;;;;:::i;:::-;5996:8;:64::i;1824:101:31:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;2369:102:42:-;2425:13;2457:7;2450:14;;;;;:::i;6575:427::-;6668:4;719:10:50;6668:4:42;6749:25;719:10:50;6766:7:42;6749:9;:25::i;:::-;6722:52;;6812:15;6792:16;:35;;6784:85;;;;-1:-1:-1;;;6784:85:42;;7054:2:58;6784:85:42;;;7036:21:58;7093:2;7073:18;;;7066:30;7132:34;7112:18;;;7105:62;-1:-1:-1;;;7183:18:58;;;7176:35;7228:19;;6784:85:42;;;;;;;;;6903:60;6912:5;6919:7;6947:15;6928:16;:34;6903:8;:60::i;3740:189::-;3819:4;719:10:50;3873:28:42;719:10:50;3890:2:42;3894:6;3873:9;:28::i;1143:186:1:-;1251:24;:22;:24::i;:::-;1285:37;1293:4;1299:7;;1308:13;1285:7;:37::i;:::-;1143:186;;;;:::o;3588:83::-;1094:13:31;:11;:13::i;:::-;3640:10:1::1;-1:-1:-1::0;;;;;3640:22:1::1;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;3890:133:::0;1094:13:31;:11;:13::i;:::-;3975:41:1::1;::::0;-1:-1:-1;;;3975:41:1;;-1:-1:-1;;;;;3172:32:58;;;3975:41:1::1;::::0;::::1;3154:51:58::0;3975:10:1::1;:24;::::0;::::1;::::0;3127:18:58;;3975:41:1::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3890:133:::0;:::o;3318:111::-;3387:35;;-1:-1:-1;;;3387:35:1;;3416:4;3387:35;;;3154:51:58;3361:7:1;;3387:10;-1:-1:-1;;;;;3387:20:1;;;;3127:18:58;;3387:35:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3380:42;;3318:111;:::o;2474:105::-;2518:54;;-1:-1:-1;;;2518:54:1;;2566:4;2518:54;;;3154:51:58;2518:10:1;-1:-1:-1;;;;;2518:20:1;;;;2547:9;;3127:18:58;;2518:54:1;;;;;;;;;;;;;;;;;;;3987:149:42;-1:-1:-1;;;;;4102:18:42;;;4076:7;4102:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3987:149::o;1983:115:16:-;1094:13:31;:11;:13::i;:::-;2067:24:16::1;2073:9;2084:6;2067:5;:24::i;:::-;1983:115:::0;;:::o;2341:358::-;1094:13:31;:11;:13::i;:::-;2475:35:16::1;2492:4;2499:7;1247::31::0;1273:6;-1:-1:-1;;;;;1273:6:31;;1201:85;2499:7:16::1;2508:1;2475:8;:35::i;:::-;2520:33;2544:8;2520:23;:33::i;:::-;2643:49;2660:4;2667:8;-1:-1:-1::0;;2643:8:16::1;:49::i;:::-;2341:358:::0;:::o;632:290:1:-;764:20;786:22;821:24;:22;:24::i;:::-;862:53;887:6;895:10;907:7;862:24;:53::i;:::-;855:60;;;;632:290;;;;;;:::o;1359:130:31:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:31;719:10:50;1422:23:31;1414:68;;;;-1:-1:-1;;;1414:68:31;;7873:2:58;1414:68:31;;;7855:21:58;;;7892:18;;;7885:30;7951:34;7931:18;;;7924:62;8003:18;;1414:68:31;7671:356:58;10457:340:42;-1:-1:-1;;;;;10558:19:42;;10550:68;;;;-1:-1:-1;;;10550:68:42;;8234:2:58;10550:68:42;;;8216:21:58;8273:2;8253:18;;;8246:30;8312:34;8292:18;;;8285:62;-1:-1:-1;;;8363:18:58;;;8356:34;8407:19;;10550:68:42;8032:400:58;10550:68:42;-1:-1:-1;;;;;10636:21:42;;10628:68;;;;-1:-1:-1;;;10628:68:42;;8639:2:58;10628:68:42;;;8621:21:58;8678:2;8658:18;;;8651:30;8717:34;8697:18;;;8690:62;-1:-1:-1;;;8768:18:58;;;8761:32;8810:19;;10628:68:42;8437:398:58;10628:68:42;-1:-1:-1;;;;;10707:18:42;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10758:32;;1742:25:58;;;10758:32:42;;1715:18:58;10758:32:42;;;;;;;10457:340;;;:::o;11078:411::-;11178:24;11205:25;11215:5;11222:7;11205:9;:25::i;:::-;11178:52;;-1:-1:-1;;11244:16:42;:37;11240:243;;11325:6;11305:16;:26;;11297:68;;;;-1:-1:-1;;;11297:68:42;;9042:2:58;11297:68:42;;;9024:21:58;9081:2;9061:18;;;9054:30;9120:31;9100:18;;;9093:59;9169:18;;11297:68:42;8840:353:58;11297:68:42;11407:51;11416:5;11423:7;11451:6;11432:16;:25;11407:8;:51::i;7456:788::-;-1:-1:-1;;;;;7552:18:42;;7544:68;;;;-1:-1:-1;;;7544:68:42;;9400:2:58;7544:68:42;;;9382:21:58;9439:2;9419:18;;;9412:30;9478:34;9458:18;;;9451:62;-1:-1:-1;;;9529:18:58;;;9522:35;9574:19;;7544:68:42;9198:401:58;7544:68:42;-1:-1:-1;;;;;7630:16:42;;7622:64;;;;-1:-1:-1;;;7622:64:42;;9806:2:58;7622:64:42;;;9788:21:58;9845:2;9825:18;;;9818:30;9884:34;9864:18;;;9857:62;-1:-1:-1;;;9935:18:58;;;9928:33;9978:19;;7622:64:42;9604:399:58;7622:64:42;-1:-1:-1;;;;;7768:15:42;;7746:19;7768:15;;;:9;:15;;;;;;7801:21;;;;7793:72;;;;-1:-1:-1;;;7793:72:42;;10210:2:58;7793:72:42;;;10192:21:58;10249:2;10229:18;;;10222:30;10288:34;10268:18;;;10261:62;-1:-1:-1;;;10339:18:58;;;10332:36;10385:19;;7793:72:42;10008:402:58;7793:72:42;-1:-1:-1;;;;;7899:15:42;;;;;;;:9;:15;;;;;;7917:20;;;7899:38;;8114:13;;;;;;;;;;:23;;;;;;8163:26;;;;;;7931:6;1742:25:58;;1730:2;1715:18;;1596:177;8163:26:42;;;;;;;;8200:37;12073:91;2426:187:31;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:31;;;-1:-1:-1;;;;;;2534:17:31;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;4087:135:1:-;4156:10;-1:-1:-1;;;;;4178:10:1;4156:33;;4148:67;;;;-1:-1:-1;;;4148:67:1;;10617:2:58;4148:67:1;;;10599:21:58;10656:2;10636:18;;;10629:30;-1:-1:-1;;;10675:18:58;;;10668:51;10736:18;;4148:67:1;10415:345:58;5010:508:16;5226:14;5243:30;;;;5254:7;5243:30;:::i;:::-;5226:47;-1:-1:-1;5283:14:16;5300:48;5319:28;1348:5;5319:13;:28;:::i;:::-;5300:18;:48::i;:::-;5283:65;;5471:40;5481:6;5497:4;5504:6;5471:9;:40::i;8520:535:42:-;-1:-1:-1;;;;;8603:21:42;;8595:65;;;;-1:-1:-1;;;8595:65:42;;10967:2:58;8595:65:42;;;10949:21:58;11006:2;10986:18;;;10979:30;11045:33;11025:18;;;11018:61;11096:18;;8595:65:42;10765:355:58;8595:65:42;8747:6;8731:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8899:18:42;;;;;;:9;:18;;;;;;;;:28;;;;;;8952:37;1742:25:58;;;8952:37:42;;1715:18:58;8952:37:42;;;;;;;1983:115:16;;:::o;2074:198:31:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:31;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:31;;11327:2:58;2154:73:31::1;::::0;::::1;11309:21:58::0;11366:2;11346:18;;;11339:30;11405:34;11385:18;;;11378:62;-1:-1:-1;;;11456:18:58;;;11449:36;11502:19;;2154:73:31::1;11125:402:58::0;2154:73:31::1;2237:28;2256:8;2237:18;:28::i;3217:918:16:-:0;3367:20;3389:22;3423:20;3446:35;3465:15;3446:18;:35::i;:::-;3423:58;;1348:5;3682:6;:27;;;:42;3674:93;;;;-1:-1:-1;;;3674:93:16;;11734:2:58;3674:93:16;;;11716:21:58;11773:2;11753:18;;;11746:30;11812:34;11792:18;;;11785:62;-1:-1:-1;;;11863:18:58;;;11856:36;11909:19;;3674:93:16;11532:402:58;3674:93:16;3782:15;;;;:6;:15;:::i;:::-;:27;;-1:-1:-1;3778:303:16;;3825:28;3846:6;3825:20;:28::i;:::-;3903:12;3875:24;3885:13;;;;:6;:13;:::i;3875:24::-;:40;;3867:92;;;;-1:-1:-1;;;3867:92:16;;12667:2:58;3867:92:16;;;12649:21:58;12706:2;12686:18;;;12679:30;12745:34;12725:18;;;12718:62;-1:-1:-1;;;12796:18:58;;;12789:37;12843:19;;3867:92:16;12465:403:58;3867:92:16;3778:303;;;4027:12;3999:24;4009:13;;;;:6;:13;:::i;3999:24::-;:40;;3991:79;;;;-1:-1:-1;;;3991:79:16;;13075:2:58;3991:79:16;;;13057:21:58;13114:2;13094:18;;;13087:30;13153:28;13133:18;;;13126:56;13199:18;;3991:79:16;12873:350:58;3991:79:16;4110:13;;;;:6;:13;:::i;:::-;4099:25;;;-1:-1:-1;;;;;3172:32:58;;;4099:25:16;;;3154:51:58;3127:18;4099:25:16;;;-1:-1:-1;;4099:25:16;;;;;;;;;;4126:1;;-1:-1:-1;3217:918:16;-1:-1:-1;;;;;3217:918:16:o;2830:135::-;2907:18;2944:14;2955:3;2944:8;:14;:::i;4299:240::-;4392:15;4426;;;;:6;:15;:::i;:::-;:23;;4446:2;;4442:1;;4426:23;:::i;:::-;4418:32;;;:::i;:::-;4410:41;;;-1:-1:-1;;;;;;4480:10:16;4469:21;;;4461:71;;;;-1:-1:-1;;;4461:71:16;;14330:2:58;4461:71:16;;;14312:21:58;14369:2;14349:18;;;14342:30;14408:34;14388:18;;;14381:62;-1:-1:-1;;;14459:18:58;;;14452:35;14504:19;;4461:71:16;14128:401:58;14:276;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:10;223:5;219:22;212:5;209:33;199:61;;256:1;253;246:12;199:61;279:5;14:276;-1:-1:-1;;;14:276:58:o;295:423::-;337:3;375:5;369:12;402:6;397:3;390:19;427:1;437:162;451:6;448:1;445:13;437:162;;;513:4;569:13;;;565:22;;559:29;541:11;;;537:20;;530:59;466:12;437:162;;;441:3;644:1;637:4;628:6;623:3;619:16;615:27;608:38;707:4;700:2;696:7;691:2;683:6;679:15;675:29;670:3;666:39;662:50;655:57;;;295:423;;;;:::o;723:220::-;872:2;861:9;854:21;835:4;892:45;933:2;922:9;918:18;910:6;892:45;:::i;948:131::-;-1:-1:-1;;;;;1023:31:58;;1013:42;;1003:70;;1069:1;1066;1059:12;1084:315;1152:6;1160;1213:2;1201:9;1192:7;1188:23;1184:32;1181:52;;;1229:1;1226;1219:12;1181:52;1268:9;1255:23;1287:31;1312:5;1287:31;:::i;:::-;1337:5;1389:2;1374:18;;;;1361:32;;-1:-1:-1;;;1084:315:58:o;2106:456::-;2183:6;2191;2199;2252:2;2240:9;2231:7;2227:23;2223:32;2220:52;;;2268:1;2265;2258:12;2220:52;2307:9;2294:23;2326:31;2351:5;2326:31;:::i;:::-;2376:5;-1:-1:-1;2433:2:58;2418:18;;2405:32;2446:33;2405:32;2446:33;:::i;:::-;2106:456;;2498:7;;-1:-1:-1;;;2552:2:58;2537:18;;;;2524:32;;2106:456::o;2756:247::-;2815:6;2868:2;2856:9;2847:7;2843:23;2839:32;2836:52;;;2884:1;2881;2874:12;2836:52;2923:9;2910:23;2942:31;2967:5;2942:31;:::i;3216:818::-;3319:6;3327;3335;3343;3396:2;3384:9;3375:7;3371:23;3367:32;3364:52;;;3412:1;3409;3402:12;3364:52;3451:9;3438:23;3490:1;3483:5;3480:12;3470:40;;3506:1;3503;3496:12;3470:40;3529:5;-1:-1:-1;3585:2:58;3570:18;;3557:32;3608:18;3638:14;;;3635:34;;;3665:1;3662;3655:12;3635:34;3703:6;3692:9;3688:22;3678:32;;3748:7;3741:4;3737:2;3733:13;3729:27;3719:55;;3770:1;3767;3760:12;3719:55;3810:2;3797:16;3836:2;3828:6;3825:14;3822:34;;;3852:1;3849;3842:12;3822:34;3897:7;3892:2;3883:6;3879:2;3875:15;3871:24;3868:37;3865:57;;;3918:1;3915;3908:12;3865:57;3216:818;;3949:2;3941:11;;;;;-1:-1:-1;3971:6:58;;4024:2;4009:18;3996:32;;-1:-1:-1;3216:818:58;-1:-1:-1;;;3216:818:58:o;4527:388::-;4595:6;4603;4656:2;4644:9;4635:7;4631:23;4627:32;4624:52;;;4672:1;4669;4662:12;4624:52;4711:9;4698:23;4730:31;4755:5;4730:31;:::i;:::-;4780:5;-1:-1:-1;4837:2:58;4822:18;;4809:32;4850:33;4809:32;4850:33;:::i;:::-;4902:7;4892:17;;;4527:388;;;;;:::o;4920:529::-;5030:6;5038;5046;5099:2;5087:9;5078:7;5074:23;5070:32;5067:52;;;5115:1;5112;5105:12;5067:52;5155:9;5142:23;5188:18;5180:6;5177:30;5174:50;;;5220:1;5217;5210:12;5174:50;5243:22;;5299:3;5281:16;;;5277:26;5274:46;;;5316:1;5313;5306:12;5274:46;5339:2;5388;5373:18;;5360:32;;-1:-1:-1;5439:2:58;5424:18;;;5411:32;;4920:529;-1:-1:-1;;;4920:529:58:o;5454:289::-;5629:2;5618:9;5611:21;5592:4;5649:45;5690:2;5679:9;5675:18;5667:6;5649:45;:::i;:::-;5641:53;;5730:6;5725:2;5714:9;5710:18;5703:34;5454:289;;;;;:::o;5945:380::-;6024:1;6020:12;;;;6067;;;6088:61;;6142:4;6134:6;6130:17;6120:27;;6088:61;6195:2;6187:6;6184:14;6164:18;6161:38;6158:161;;6241:10;6236:3;6232:20;6229:1;6222:31;6276:4;6273:1;6266:15;6304:4;6301:1;6294:15;6158:161;;5945:380;;;:::o;6625:222::-;6690:9;;;6711:10;;;6708:133;;;6763:10;6758:3;6754:20;6751:1;6744:31;6798:4;6795:1;6788:15;6826:4;6823:1;6816:15;7482:184;7552:6;7605:2;7593:9;7584:7;7580:23;7576:32;7573:52;;;7621:1;7618;7611:12;7573:52;-1:-1:-1;7644:16:58;;7482:184;-1:-1:-1;7482:184:58:o;11939:521::-;12016:4;12022:6;12082:11;12069:25;12176:2;12172:7;12161:8;12145:14;12141:29;12137:43;12117:18;12113:68;12103:96;;12195:1;12192;12185:12;12103:96;12222:33;;12274:20;;;-1:-1:-1;12317:18:58;12306:30;;12303:50;;;12349:1;12346;12339:12;12303:50;12382:4;12370:17;;-1:-1:-1;12413:14:58;12409:27;;;12399:38;;12396:58;;;12450:1;12447;12440:12;12396:58;11939:521;;;;;:::o;13228:217::-;13268:1;13294;13284:132;;13338:10;13333:3;13329:20;13326:1;13319:31;13373:4;13370:1;13363:15;13401:4;13398:1;13391:15;13284:132;-1:-1:-1;13430:9:58;;13228:217::o;13450:331::-;13555:9;13566;13608:8;13596:10;13593:24;13590:44;;;13630:1;13627;13620:12;13590:44;13659:6;13649:8;13646:20;13643:40;;;13679:1;13676;13669:12;13643:40;-1:-1:-1;;13705:23:58;;;13750:25;;;;;-1:-1:-1;13450:331:58:o;13786:337::-;-1:-1:-1;;13907:19:58;;13994:11;;;;14025:2;14017:11;;14014:103;;;14104:2;14098;14091:3;14087:2;14083:12;14080:1;14076:20;14072:29;14068:2;14064:38;14060:47;14051:56;;14014:103;;;13786:337;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "155": [
        {
          "start": 991,
          "length": 32
        },
        {
          "start": 1283,
          "length": 32
        },
        {
          "start": 1606,
          "length": 32
        },
        {
          "start": 1957,
          "length": 32
        },
        {
          "start": 2105,
          "length": 32
        },
        {
          "start": 2224,
          "length": 32
        },
        {
          "start": 2365,
          "length": 32
        },
        {
          "start": 3620,
          "length": 32
        }
      ],
      "4484": [
        {
          "start": 843,
          "length": 32
        },
        {
          "start": 4569,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "COST_OF_POST()": "796d4371",
    "addStake(uint32)": "0396cb60",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "deposit()": "d0e30db0",
    "entryPoint()": "b0d691fe",
    "getDeposit()": "c399ec88",
    "increaseAllowance(address,uint256)": "39509351",
    "mintTokens(address,uint256)": "f0dda65c",
    "name()": "06fdde03",
    "owner()": "8da5cb5b",
    "postOp(uint8,bytes,uint256)": "a9a23409",
    "renounceOwnership()": "715018a6",
    "symbol()": "95d89b41",
    "theFactory()": "9f5ca221",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "transferOwnership(address)": "f2fde38b",
    "unlockStake()": "bb9fe6bf",
    "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": "f465c77e",
    "withdrawStake(address)": "c23a5cea",
    "withdrawTo(address,uint256)": "205c2878"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COST_OF_POST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"- the unstake delay for this paymaster. Can only be increased.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintTokens(address,uint256)\":{\"params\":{\"amount\":\"- the amount it will receive.\",\"recipient\":\"- the address that will receive the minted tokens.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOp(uint8,bytes,uint256)\":{\"params\":{\"actualGasCost\":\"- actual gas used so far (without this postOp call).\",\"context\":\"- the context value returned by validatePaymasterUserOp\",\"mode\":\"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"params\":{\"maxCost\":\"the maximum cost of this transaction (based on maximum gas and gas price from userOp)\",\"userOp\":\"the user operation\",\"userOpHash\":\"hash of the user's request data.\"},\"returns\":{\"context\":\"value to send to a postOp      zero length to signify postOp is not required.\",\"validationData\":\"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"amount\":\"to withdraw\",\"withdrawAddress\":\"target to send to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add stake for this paymaster. This method can also carry eth value to add to the current stake.\"},\"deposit()\":{\"notice\":\"add a deposit for this paymaster, used for paying for transaction fees\"},\"getDeposit()\":{\"notice\":\"return current paymaster's deposit on the entryPoint.\"},\"mintTokens(address,uint256)\":{\"notice\":\"helpers for owner, to mint and withdraw tokens.\"},\"postOp(uint8,bytes,uint256)\":{\"notice\":\"post-operation handler. Must verify sender is the entryPoint\"},\"transferOwnership(address)\":{\"notice\":\"transfer paymaster ownership. owner of this paymaster is allowed to withdraw funds (tokens transferred to this paymaster's balance) when changing owner, the old owner's withdrawal rights are revoked.\"},\"unlockStake()\":{\"notice\":\"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw value from the deposit\"}},\"notice\":\"A sample paymaster that defines itself as a token to pay for gas. The paymaster IS the token to use, since a paymaster cannot use an external contract. Also, the exchange rate has to be fixed, since it can't reference an external Uniswap or other exchange contract. subclass should override \\\"getTokenValueOfEth\\\" to provide actual token exchange rate, settable by the owner. Known Limitation: this paymaster is exploitable when put into a batch with multiple ops (of different accounts): - while a single op can't exploit the paymaster (if postOp fails to withdraw the tokens, the user's op is reverted,   and then we know we can withdraw the tokens), multiple ops with different senders (all using this paymaster)   in a batch can withdraw funds from 2nd and further ops, forcing the paymaster itself to pay (from its deposit) - Possible workarounds are either use a more complex paymaster scheme (e.g. the DepositPaymaster) or   to whitelist the account and the called method ids.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/samples/LegacyTokenPaymaster.sol\":\"LegacyTokenPaymaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/core/BasePaymaster.sol\":{\"keccak256\":\"0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://426f0c6565ae612d34ae184fb1582e6fc360abf79450975c1c2dd439184094a0\",\"dweb:/ipfs/QmZMeMosC1P6Z5BQyT6iGFQrY6ui5ART65ycVWmXFnDpoq\"]},\"contracts/core/Helpers.sol\":{\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://69643e83f68e6a13d5075c7565bfce326673b0bd98c432033c4603ea84835746\",\"dweb:/ipfs/QmSwSzjYyV7qudi5vvsmzHMG2Z4YJZxX51RRXXVCLaNcEU\"]},\"contracts/interfaces/IAggregator.sol\":{\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://20ed837bc5909c89ff1910246bf245a5dad6840aa939382e1694964eb7dbd37b\",\"dweb:/ipfs/QmTMybRq5yyghPDDs1ZCNAVB9sSJ4WHe6Q9mejuKPTAdNP\"]},\"contracts/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d2d21cc92c2fdab2b58d21bc25d4cd0e8c284b922528a186b087b818d54bc6cf\",\"dweb:/ipfs/QmT1qrfuBjsv2rmRCDn8mgPXHp94hARJwzbcDuBLDTbFWd\"]},\"contracts/interfaces/INonceManager.sol\":{\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2\",\"dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b\"]},\"contracts/interfaces/IPaymaster.sol\":{\"keccak256\":\"0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://616cbcf51778b1961b7f20a547bec7efae6d1d565df0f651926241ed8bde9ad8\",\"dweb:/ipfs/QmaVsgffUUmeUJYgStvRr8cNZ1LBbrc3FYNLW4JT1dVLia\"]},\"contracts/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://b389da4714a138be63704a576a482505eab2855e263b38a93706395d8d42e7c3\",\"dweb:/ipfs/QmeeAZpdHwUXxqP8pxA7GNtoCGBmmH4FaqLLwScVKGxtxZ\"]},\"contracts/interfaces/UserOperation.sol\":{\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6ff83c59432e733bf6304dda27cd4b0f34401917dd535e2669cc842d2d26568c\",\"dweb:/ipfs/QmPJbHU5TAjHqUTZzAcicEeG2nknmwCN43L4EW9LHbknTN\"]},\"contracts/samples/LegacyTokenPaymaster.sol\":{\"keccak256\":\"0xaf64f60f0f96b15eedd957610e24741b987a58d46370c0ca854ea755d0a0d9a9\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://85c6f937047039a4719ead3d59a16fc2d330363a89eb0837c43609f142bc50a8\",\"dweb:/ipfs/QmQMLpWhD1vFgHDBTsTVsxrNhYZaTQZxbLvenTGxoe7gQC\"]},\"node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "accountFactory",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "contract IEntryPoint",
              "name": "_entryPoint",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COST_OF_POST",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "addStake"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "function",
          "name": "deposit"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "entryPoint",
          "outputs": [
            {
              "internalType": "contract IEntryPoint",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDeposit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mintTokens"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum IPaymaster.PostOpMode",
              "name": "mode",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "actualGasCost",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "postOp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "theFactory",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unlockStake"
        },
        {
          "inputs": [
            {
              "internalType": "struct UserOperation",
              "name": "userOp",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "userOpHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maxCost",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "validatePaymasterUserOp",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validationData",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "withdrawAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawStake"
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "withdrawAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTo"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addStake(uint32)": {
            "params": {
              "unstakeDelaySec": "- the unstake delay for this paymaster. Can only be increased."
            }
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "mintTokens(address,uint256)": {
            "params": {
              "amount": "- the amount it will receive.",
              "recipient": "- the address that will receive the minted tokens."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "postOp(uint8,bytes,uint256)": {
            "params": {
              "actualGasCost": "- actual gas used so far (without this postOp call).",
              "context": "- the context value returned by validatePaymasterUserOp",
              "mode": "enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
            "params": {
              "maxCost": "the maximum cost of this transaction (based on maximum gas and gas price from userOp)",
              "userOp": "the user operation",
              "userOpHash": "hash of the user's request data."
            },
            "returns": {
              "context": "value to send to a postOp      zero length to signify postOp is not required.",
              "validationData": "signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly."
            }
          },
          "withdrawStake(address)": {
            "params": {
              "withdrawAddress": "the address to send withdrawn value."
            }
          },
          "withdrawTo(address,uint256)": {
            "params": {
              "amount": "to withdraw",
              "withdrawAddress": "target to send to"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addStake(uint32)": {
            "notice": "add stake for this paymaster. This method can also carry eth value to add to the current stake."
          },
          "deposit()": {
            "notice": "add a deposit for this paymaster, used for paying for transaction fees"
          },
          "getDeposit()": {
            "notice": "return current paymaster's deposit on the entryPoint."
          },
          "mintTokens(address,uint256)": {
            "notice": "helpers for owner, to mint and withdraw tokens."
          },
          "postOp(uint8,bytes,uint256)": {
            "notice": "post-operation handler. Must verify sender is the entryPoint"
          },
          "transferOwnership(address)": {
            "notice": "transfer paymaster ownership. owner of this paymaster is allowed to withdraw funds (tokens transferred to this paymaster's balance) when changing owner, the old owner's withdrawal rights are revoked."
          },
          "unlockStake()": {
            "notice": "unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"
          },
          "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
            "notice": "payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."
          },
          "withdrawStake(address)": {
            "notice": "withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"
          },
          "withdrawTo(address,uint256)": {
            "notice": "withdraw value from the deposit"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/samples/LegacyTokenPaymaster.sol": "LegacyTokenPaymaster"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/core/BasePaymaster.sol": {
        "keccak256": "0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443",
        "urls": [
          "bzz-raw://426f0c6565ae612d34ae184fb1582e6fc360abf79450975c1c2dd439184094a0",
          "dweb:/ipfs/QmZMeMosC1P6Z5BQyT6iGFQrY6ui5ART65ycVWmXFnDpoq"
        ],
        "license": "GPL-3.0"
      },
      "contracts/core/Helpers.sol": {
        "keccak256": "0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a",
        "urls": [
          "bzz-raw://69643e83f68e6a13d5075c7565bfce326673b0bd98c432033c4603ea84835746",
          "dweb:/ipfs/QmSwSzjYyV7qudi5vvsmzHMG2Z4YJZxX51RRXXVCLaNcEU"
        ],
        "license": "GPL-3.0"
      },
      "contracts/interfaces/IAggregator.sol": {
        "keccak256": "0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a",
        "urls": [
          "bzz-raw://20ed837bc5909c89ff1910246bf245a5dad6840aa939382e1694964eb7dbd37b",
          "dweb:/ipfs/QmTMybRq5yyghPDDs1ZCNAVB9sSJ4WHe6Q9mejuKPTAdNP"
        ],
        "license": "GPL-3.0"
      },
      "contracts/interfaces/IEntryPoint.sol": {
        "keccak256": "0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8",
        "urls": [
          "bzz-raw://d2d21cc92c2fdab2b58d21bc25d4cd0e8c284b922528a186b087b818d54bc6cf",
          "dweb:/ipfs/QmT1qrfuBjsv2rmRCDn8mgPXHp94hARJwzbcDuBLDTbFWd"
        ],
        "license": "GPL-3.0"
      },
      "contracts/interfaces/INonceManager.sol": {
        "keccak256": "0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12",
        "urls": [
          "bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2",
          "dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b"
        ],
        "license": "GPL-3.0"
      },
      "contracts/interfaces/IPaymaster.sol": {
        "keccak256": "0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456",
        "urls": [
          "bzz-raw://616cbcf51778b1961b7f20a547bec7efae6d1d565df0f651926241ed8bde9ad8",
          "dweb:/ipfs/QmaVsgffUUmeUJYgStvRr8cNZ1LBbrc3FYNLW4JT1dVLia"
        ],
        "license": "GPL-3.0"
      },
      "contracts/interfaces/IStakeManager.sol": {
        "keccak256": "0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f",
        "urls": [
          "bzz-raw://b389da4714a138be63704a576a482505eab2855e263b38a93706395d8d42e7c3",
          "dweb:/ipfs/QmeeAZpdHwUXxqP8pxA7GNtoCGBmmH4FaqLLwScVKGxtxZ"
        ],
        "license": "GPL-3.0-only"
      },
      "contracts/interfaces/UserOperation.sol": {
        "keccak256": "0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c",
        "urls": [
          "bzz-raw://6ff83c59432e733bf6304dda27cd4b0f34401917dd535e2669cc842d2d26568c",
          "dweb:/ipfs/QmPJbHU5TAjHqUTZzAcicEeG2nknmwCN43L4EW9LHbknTN"
        ],
        "license": "GPL-3.0"
      },
      "contracts/samples/LegacyTokenPaymaster.sol": {
        "keccak256": "0xaf64f60f0f96b15eedd957610e24741b987a58d46370c0ca854ea755d0a0d9a9",
        "urls": [
          "bzz-raw://85c6f937047039a4719ead3d59a16fc2d330363a89eb0837c43609f142bc50a8",
          "dweb:/ipfs/QmQMLpWhD1vFgHDBTsTVsxrNhYZaTQZxbLvenTGxoe7gQC"
        ],
        "license": "GPL-3.0"
      },
      "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
        "keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
        "urls": [
          "bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
          "dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
        "urls": [
          "bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
          "dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/samples/LegacyTokenPaymaster.sol",
    "id": 4739,
    "exportedSymbols": {
      "BasePaymaster": [
        361
      ],
      "Context": [
        11111
      ],
      "ERC20": [
        10206
      ],
      "IAggregator": [
        3436
      ],
      "IERC20": [
        10284
      ],
      "IERC20Metadata": [
        10309
      ],
      "IEntryPoint": [
        3640
      ],
      "INonceManager": [
        3659
      ],
      "IPaymaster": [
        3694
      ],
      "IStakeManager": [
        3799
      ],
      "LegacyTokenPaymaster": [
        4738
      ],
      "Ownable": [
        8794
      ],
      "UserOperation": [
        3826
      ],
      "UserOperationLib": [
        3996
      ],
      "ValidationData": [
        2594
      ],
      "_intersectTimeRange": [
        2738
      ],
      "_packValidationData": [
        2775,
        2813
      ],
      "_parseValidationData": [
        2653
      ],
      "calldataKeccak": [
        2823
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:5485:16",
    "nodes": [
      {
        "id": 4472,
        "nodeType": "PragmaDirective",
        "src": "36:24:16",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ]
      },
      {
        "id": 4473,
        "nodeType": "ImportDirective",
        "src": "99:55:16",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4739,
        "sourceUnit": 10207,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4474,
        "nodeType": "ImportDirective",
        "src": "155:35:16",
        "nodes": [],
        "absolutePath": "contracts/core/BasePaymaster.sol",
        "file": "../core/BasePaymaster.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4739,
        "sourceUnit": 362,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4738,
        "nodeType": "ContractDefinition",
        "src": "1212:4308:16",
        "nodes": [
          {
            "id": 4482,
            "nodeType": "VariableDeclaration",
            "src": "1309:44:16",
            "nodes": [],
            "constant": true,
            "functionSelector": "796d4371",
            "mutability": "constant",
            "name": "COST_OF_POST",
            "nameLocation": "1333:12:16",
            "scope": 4738,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4480,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1309:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3135303030",
              "id": 4481,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1348:5:16",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_15000_by_1",
                "typeString": "int_const 15000"
              },
              "value": "15000"
            },
            "visibility": "public"
          },
          {
            "id": 4484,
            "nodeType": "VariableDeclaration",
            "src": "1360:35:16",
            "nodes": [],
            "constant": false,
            "functionSelector": "9f5ca221",
            "mutability": "immutable",
            "name": "theFactory",
            "nameLocation": "1385:10:16",
            "scope": 4738,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4483,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1360:7:16",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 4528,
            "nodeType": "FunctionDefinition",
            "src": "1402:377:16",
            "nodes": [],
            "body": {
              "id": 4527,
              "nodeType": "Block",
              "src": "1537:242:16",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4503,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4501,
                      "name": "theFactory",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4484,
                      "src": "1547:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4502,
                      "name": "accountFactory",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4486,
                      "src": "1560:14:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1547:27:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4504,
                  "nodeType": "ExpressionStatement",
                  "src": "1547:27:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4508,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "1626:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          ],
                          "id": 4507,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1618:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4506,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1618:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4509,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1618:13:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 4510,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1633:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        }
                      ],
                      "id": 4505,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10023,
                      "src": "1612:5:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4511,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1612:23:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4512,
                  "nodeType": "ExpressionStatement",
                  "src": "1612:23:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4516,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "1738:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          ],
                          "id": 4515,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1730:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4514,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1730:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1730:13:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 4518,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1745:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4519,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1749:6:16",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1745:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4522,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1762:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 4521,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "1762:4:16",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              }
                            ],
                            "id": 4520,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "1757:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4523,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1757:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint256",
                            "typeString": "type(uint256)"
                          }
                        },
                        "id": 4524,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1768:3:16",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "1757:14:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4513,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10140,
                      "src": "1721:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 4525,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1721:51:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4526,
                  "nodeType": "ExpressionStatement",
                  "src": "1721:51:16"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4494,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4488,
                    "src": "1492:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4495,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4488,
                    "src": "1501:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4496,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4493,
                  "name": "ERC20",
                  "nameLocations": [
                    "1486:5:16"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10206,
                  "src": "1486:5:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "1486:23:16"
              },
              {
                "arguments": [
                  {
                    "id": 4498,
                    "name": "_entryPoint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4491,
                    "src": "1524:11:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEntryPoint_$3640",
                      "typeString": "contract IEntryPoint"
                    }
                  }
                ],
                "id": 4499,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4497,
                  "name": "BasePaymaster",
                  "nameLocations": [
                    "1510:13:16"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 361,
                  "src": "1510:13:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "1510:26:16"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 4492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4486,
                  "mutability": "mutable",
                  "name": "accountFactory",
                  "nameLocation": "1422:14:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4528,
                  "src": "1414:22:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4485,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1414:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4488,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1452:7:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4528,
                  "src": "1438:21:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4487,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1438:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4491,
                  "mutability": "mutable",
                  "name": "_entryPoint",
                  "nameLocation": "1473:11:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4528,
                  "src": "1461:23:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IEntryPoint_$3640",
                    "typeString": "contract IEntryPoint"
                  },
                  "typeName": {
                    "id": 4490,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4489,
                      "name": "IEntryPoint",
                      "nameLocations": [
                        "1461:11:16"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3640,
                      "src": "1461:11:16"
                    },
                    "referencedDeclaration": 3640,
                    "src": "1461:11:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEntryPoint_$3640",
                      "typeString": "contract IEntryPoint"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1413:72:16"
            },
            "returnParameters": {
              "id": 4500,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1537:0:16"
            },
            "scope": 4738,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4544,
            "nodeType": "FunctionDefinition",
            "src": "1983:115:16",
            "nodes": [],
            "body": {
              "id": 4543,
              "nodeType": "Block",
              "src": "2057:41:16",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4539,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4531,
                        "src": "2073:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4540,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4533,
                        "src": "2084:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4538,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10023,
                      "src": "2067:5:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2067:24:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4542,
                  "nodeType": "ExpressionStatement",
                  "src": "2067:24:16"
                }
              ]
            },
            "documentation": {
              "id": 4529,
              "nodeType": "StructuredDocumentation",
              "src": "1786:192:16",
              "text": " helpers for owner, to mint and withdraw tokens.\n @param recipient - the address that will receive the minted tokens.\n @param amount - the amount it will receive."
            },
            "functionSelector": "f0dda65c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4536,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4535,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2047:9:16"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8713,
                  "src": "2047:9:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "2047:9:16"
              }
            ],
            "name": "mintTokens",
            "nameLocation": "1992:10:16",
            "parameters": {
              "id": 4534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4531,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "2011:9:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4544,
                  "src": "2003:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4530,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2003:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4533,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2030:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4544,
                  "src": "2022:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4532,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2022:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2002:35:16"
            },
            "returnParameters": {
              "id": 4537,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2057:0:16"
            },
            "scope": 4738,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4583,
            "nodeType": "FunctionDefinition",
            "src": "2341:358:16",
            "nodes": [],
            "body": {
              "id": 4582,
              "nodeType": "Block",
              "src": "2420:279:16",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4556,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "2492:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          ],
                          "id": 4555,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2484:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4554,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2484:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2484:13:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 4558,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8722,
                          "src": "2499:5:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 4559,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2499:7:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 4560,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2508:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 4553,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10140,
                      "src": "2475:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 4561,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2475:35:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4562,
                  "nodeType": "ExpressionStatement",
                  "src": "2475:35:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4566,
                        "name": "newOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4547,
                        "src": "2544:8:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4563,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2520:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_LegacyTokenPaymaster_$4738_$",
                          "typeString": "type(contract super LegacyTokenPaymaster)"
                        }
                      },
                      "id": 4565,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2526:17:16",
                      "memberName": "transferOwnership",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8773,
                      "src": "2520:23:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2520:33:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4568,
                  "nodeType": "ExpressionStatement",
                  "src": "2520:33:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4572,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "2660:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          ],
                          "id": 4571,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2652:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4570,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2652:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2652:13:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4574,
                        "name": "newOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4547,
                        "src": "2667:8:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4577,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2682:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 4576,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "2682:4:16",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              }
                            ],
                            "id": 4575,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "2677:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2677:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint256",
                            "typeString": "type(uint256)"
                          }
                        },
                        "id": 4579,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2688:3:16",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "2677:14:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4569,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10140,
                      "src": "2643:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 4580,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2643:49:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4581,
                  "nodeType": "ExpressionStatement",
                  "src": "2643:49:16"
                }
              ]
            },
            "baseFunctions": [
              8773
            ],
            "documentation": {
              "id": 4545,
              "nodeType": "StructuredDocumentation",
              "src": "2104:232:16",
              "text": " transfer paymaster ownership.\n owner of this paymaster is allowed to withdraw funds (tokens transferred to this paymaster's balance)\n when changing owner, the old owner's withdrawal rights are revoked."
            },
            "functionSelector": "f2fde38b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4551,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4550,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2410:9:16"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8713,
                  "src": "2410:9:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "2410:9:16"
              }
            ],
            "name": "transferOwnership",
            "nameLocation": "2350:17:16",
            "overrides": {
              "id": 4549,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2393:8:16"
            },
            "parameters": {
              "id": 4548,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4547,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "2376:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4583,
                  "src": "2368:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4546,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2368:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2367:18:16"
            },
            "returnParameters": {
              "id": 4552,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2420:0:16"
            },
            "scope": 4738,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4595,
            "nodeType": "FunctionDefinition",
            "src": "2830:135:16",
            "nodes": [],
            "body": {
              "id": 4594,
              "nodeType": "Block",
              "src": "2927:38:16",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4592,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4590,
                      "name": "valueEth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4585,
                      "src": "2944:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "313030",
                      "id": 4591,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2955:3:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "2944:14:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4589,
                  "id": 4593,
                  "nodeType": "Return",
                  "src": "2937:21:16"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenValueOfEth",
            "nameLocation": "2839:18:16",
            "parameters": {
              "id": 4586,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4585,
                  "mutability": "mutable",
                  "name": "valueEth",
                  "nameLocation": "2866:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4595,
                  "src": "2858:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4584,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2858:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2857:18:16"
            },
            "returnParameters": {
              "id": 4589,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4588,
                  "mutability": "mutable",
                  "name": "valueToken",
                  "nameLocation": "2915:10:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4595,
                  "src": "2907:18:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4587,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2907:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2906:20:16"
            },
            "scope": 4738,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4666,
            "nodeType": "FunctionDefinition",
            "src": "3217:918:16",
            "nodes": [],
            "body": {
              "id": 4665,
              "nodeType": "Block",
              "src": "3413:722:16",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4612
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4612,
                      "mutability": "mutable",
                      "name": "tokenPrefund",
                      "nameLocation": "3431:12:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 4665,
                      "src": "3423:20:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4611,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3423:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4616,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4614,
                        "name": "requiredPreFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4603,
                        "src": "3465:15:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4613,
                      "name": "getTokenValueOfEth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4595,
                      "src": "3446:18:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 4615,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3446:35:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3423:58:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4621,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4618,
                            "name": "userOp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4599,
                            "src": "3682:6:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                              "typeString": "struct UserOperation calldata"
                            }
                          },
                          "id": 4619,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3689:20:16",
                          "memberName": "verificationGasLimit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3815,
                          "src": "3682:27:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "id": 4620,
                          "name": "COST_OF_POST",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4482,
                          "src": "3712:12:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3682:42:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e5061796d61737465723a2067617320746f6f206c6f7720666f7220706f73744f70",
                        "id": 4622,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3726:40:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e63029b4be8f7147d8fa8c7176417177721349d796aec4cd58131ce1ae4a4e98",
                          "typeString": "literal_string \"TokenPaymaster: gas too low for postOp\""
                        },
                        "value": "TokenPaymaster: gas too low for postOp"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e63029b4be8f7147d8fa8c7176417177721349d796aec4cd58131ce1ae4a4e98",
                          "typeString": "literal_string \"TokenPaymaster: gas too low for postOp\""
                        }
                      ],
                      "id": 4617,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3674:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4623,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3674:93:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4624,
                  "nodeType": "ExpressionStatement",
                  "src": "3674:93:16"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4629,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "expression": {
                          "id": 4625,
                          "name": "userOp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4599,
                          "src": "3782:6:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                            "typeString": "struct UserOperation calldata"
                          }
                        },
                        "id": 4626,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3789:8:16",
                        "memberName": "initCode",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3809,
                        "src": "3782:15:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "id": 4627,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3798:6:16",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3782:22:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 4628,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3808:1:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3782:27:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4655,
                    "nodeType": "Block",
                    "src": "3976:105:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4651,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 4647,
                                      "name": "userOp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4599,
                                      "src": "4009:6:16",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                                        "typeString": "struct UserOperation calldata"
                                      }
                                    },
                                    "id": 4648,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4016:6:16",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3805,
                                    "src": "4009:13:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 4646,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 9718,
                                  "src": "3999:9:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view returns (uint256)"
                                  }
                                },
                                "id": 4649,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3999:24:16",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 4650,
                                "name": "tokenPrefund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4612,
                                "src": "4027:12:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3999:40:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "546f6b656e5061796d61737465723a206e6f2062616c616e6365",
                              "id": 4652,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4041:28:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ba1208b32158094aac35ebe5e696720821cdfa1d15e4b106c836c9b43fcf322a",
                                "typeString": "literal_string \"TokenPaymaster: no balance\""
                              },
                              "value": "TokenPaymaster: no balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ba1208b32158094aac35ebe5e696720821cdfa1d15e4b106c836c9b43fcf322a",
                                "typeString": "literal_string \"TokenPaymaster: no balance\""
                              }
                            ],
                            "id": 4645,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3991:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4653,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3991:79:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4654,
                        "nodeType": "ExpressionStatement",
                        "src": "3991:79:16"
                      }
                    ]
                  },
                  "id": 4656,
                  "nodeType": "IfStatement",
                  "src": "3778:303:16",
                  "trueBody": {
                    "id": 4644,
                    "nodeType": "Block",
                    "src": "3811:159:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4631,
                              "name": "userOp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4599,
                              "src": "3846:6:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                                "typeString": "struct UserOperation calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                                "typeString": "struct UserOperation calldata"
                              }
                            ],
                            "id": 4630,
                            "name": "_validateConstructor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4694,
                            "src": "3825:20:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_UserOperation_$3826_calldata_ptr_$returns$__$",
                              "typeString": "function (struct UserOperation calldata) view"
                            }
                          },
                          "id": 4632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3825:28:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4633,
                        "nodeType": "ExpressionStatement",
                        "src": "3825:28:16"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4640,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 4636,
                                      "name": "userOp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4599,
                                      "src": "3885:6:16",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                                        "typeString": "struct UserOperation calldata"
                                      }
                                    },
                                    "id": 4637,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "3892:6:16",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3805,
                                    "src": "3885:13:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 4635,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 9718,
                                  "src": "3875:9:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view returns (uint256)"
                                  }
                                },
                                "id": 4638,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3875:24:16",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 4639,
                                "name": "tokenPrefund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4612,
                                "src": "3903:12:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3875:40:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "546f6b656e5061796d61737465723a206e6f2062616c616e636520287072652d63726561746529",
                              "id": 4641,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3917:41:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a3a5fd70368e4e698a4b1ca2306756bd67295a1b90e45690e5829cd9be775e0d",
                                "typeString": "literal_string \"TokenPaymaster: no balance (pre-create)\""
                              },
                              "value": "TokenPaymaster: no balance (pre-create)"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a3a5fd70368e4e698a4b1ca2306756bd67295a1b90e45690e5829cd9be775e0d",
                                "typeString": "literal_string \"TokenPaymaster: no balance (pre-create)\""
                              }
                            ],
                            "id": 4634,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3867:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4642,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3867:92:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4643,
                        "nodeType": "ExpressionStatement",
                        "src": "3867:92:16"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 4659,
                              "name": "userOp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4599,
                              "src": "4110:6:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                                "typeString": "struct UserOperation calldata"
                              }
                            },
                            "id": 4660,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4117:6:16",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3805,
                            "src": "4110:13:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 4657,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4099:3:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 4658,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "4103:6:16",
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "4099:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 4661,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4099:25:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 4662,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4126:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "id": 4663,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4098:30:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_rational_0_by_1_$",
                      "typeString": "tuple(bytes memory,int_const 0)"
                    }
                  },
                  "functionReturnParameters": 4610,
                  "id": 4664,
                  "nodeType": "Return",
                  "src": "4091:37:16"
                }
              ]
            },
            "baseFunctions": [
              206
            ],
            "documentation": {
              "id": 4596,
              "nodeType": "StructuredDocumentation",
              "src": "2971:241:16",
              "text": " validate the request:\n if this is a constructor call, make sure it is a known account.\n verify the sender has enough tokens.\n (since the paymaster is also the token, there is no notion of \"approval\")"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_validatePaymasterUserOp",
            "nameLocation": "3226:24:16",
            "overrides": {
              "id": 4605,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3349:8:16"
            },
            "parameters": {
              "id": 4604,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4599,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "3274:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4666,
                  "src": "3251:29:16",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                    "typeString": "struct UserOperation"
                  },
                  "typeName": {
                    "id": 4598,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4597,
                      "name": "UserOperation",
                      "nameLocations": [
                        "3251:13:16"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3826,
                      "src": "3251:13:16"
                    },
                    "referencedDeclaration": 3826,
                    "src": "3251:13:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserOperation_$3826_storage_ptr",
                      "typeString": "struct UserOperation"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4601,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4666,
                  "src": "3282:7:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4600,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3282:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4603,
                  "mutability": "mutable",
                  "name": "requiredPreFund",
                  "nameLocation": "3314:15:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4666,
                  "src": "3306:23:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4602,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3306:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3250:80:16"
            },
            "returnParameters": {
              "id": 4610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4607,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "3380:7:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4666,
                  "src": "3367:20:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4606,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3367:5:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4609,
                  "mutability": "mutable",
                  "name": "validationData",
                  "nameLocation": "3397:14:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4666,
                  "src": "3389:22:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4608,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3389:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3366:46:16"
            },
            "scope": 4738,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 4694,
            "nodeType": "FunctionDefinition",
            "src": "4299:240:16",
            "nodes": [],
            "body": {
              "id": 4693,
              "nodeType": "Block",
              "src": "4382:157:16",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4673
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4673,
                      "mutability": "mutable",
                      "name": "factory",
                      "nameLocation": "4400:7:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 4693,
                      "src": "4392:15:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4672,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4392:7:16",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4685,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "baseExpression": {
                              "expression": {
                                "id": 4678,
                                "name": "userOp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4669,
                                "src": "4426:6:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                                  "typeString": "struct UserOperation calldata"
                                }
                              },
                              "id": 4679,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4433:8:16",
                              "memberName": "initCode",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3809,
                              "src": "4426:15:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            "endExpression": {
                              "hexValue": "3230",
                              "id": 4681,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4446:2:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              },
                              "value": "20"
                            },
                            "id": 4682,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexRangeAccess",
                            "src": "4426:23:16",
                            "startExpression": {
                              "hexValue": "30",
                              "id": 4680,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4442:1:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr_slice",
                              "typeString": "bytes calldata slice"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_calldata_ptr_slice",
                              "typeString": "bytes calldata slice"
                            }
                          ],
                          "id": 4677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4418:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes20_$",
                            "typeString": "type(bytes20)"
                          },
                          "typeName": {
                            "id": 4676,
                            "name": "bytes20",
                            "nodeType": "ElementaryTypeName",
                            "src": "4418:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4683,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4418:32:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes20",
                          "typeString": "bytes20"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes20",
                          "typeString": "bytes20"
                        }
                      ],
                      "id": 4675,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4410:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 4674,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4410:7:16",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 4684,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4410:41:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4392:59:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4689,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4687,
                          "name": "factory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4673,
                          "src": "4469:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 4688,
                          "name": "theFactory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4484,
                          "src": "4480:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4469:21:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e5061796d61737465723a2077726f6e67206163636f756e7420666163746f7279",
                        "id": 4690,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4492:39:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c8acd6a8133474c975607944c89a9c2827b6234a8b3c94e8e794cae85c818cf6",
                          "typeString": "literal_string \"TokenPaymaster: wrong account factory\""
                        },
                        "value": "TokenPaymaster: wrong account factory"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c8acd6a8133474c975607944c89a9c2827b6234a8b3c94e8e794cae85c818cf6",
                          "typeString": "literal_string \"TokenPaymaster: wrong account factory\""
                        }
                      ],
                      "id": 4686,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4461:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4461:71:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4692,
                  "nodeType": "ExpressionStatement",
                  "src": "4461:71:16"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_validateConstructor",
            "nameLocation": "4308:20:16",
            "parameters": {
              "id": 4670,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4669,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "4352:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4694,
                  "src": "4329:29:16",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserOperation_$3826_calldata_ptr",
                    "typeString": "struct UserOperation"
                  },
                  "typeName": {
                    "id": 4668,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4667,
                      "name": "UserOperation",
                      "nameLocations": [
                        "4329:13:16"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3826,
                      "src": "4329:13:16"
                    },
                    "referencedDeclaration": 3826,
                    "src": "4329:13:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserOperation_$3826_storage_ptr",
                      "typeString": "struct UserOperation"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4328:31:16"
            },
            "returnParameters": {
              "id": 4671,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4382:0:16"
            },
            "scope": 4738,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4737,
            "nodeType": "FunctionDefinition",
            "src": "5010:508:16",
            "nodes": [],
            "body": {
              "id": 4736,
              "nodeType": "Block",
              "src": "5109:409:16",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 4706,
                        "name": "mode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4698,
                        "src": "5211:4:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_PostOpMode_$3667",
                          "typeString": "enum IPaymaster.PostOpMode"
                        }
                      }
                    ],
                    "id": 4707,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "5210:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PostOpMode_$3667",
                      "typeString": "enum IPaymaster.PostOpMode"
                    }
                  },
                  "id": 4708,
                  "nodeType": "ExpressionStatement",
                  "src": "5210:6:16"
                },
                {
                  "assignments": [
                    4710
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4710,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "5234:6:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 4736,
                      "src": "5226:14:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4709,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5226:7:16",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4718,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4713,
                        "name": "context",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4700,
                        "src": "5254:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 4715,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5264:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4714,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5264:7:16",
                              "typeDescriptions": {}
                            }
                          }
                        ],
                        "id": 4716,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "5263:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        }
                      ],
                      "expression": {
                        "id": 4711,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "5243:3:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 4712,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "5247:6:16",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "5243:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 4717,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5243:30:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5226:47:16"
                },
                {
                  "assignments": [
                    4720
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4720,
                      "mutability": "mutable",
                      "name": "charge",
                      "nameLocation": "5291:6:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 4736,
                      "src": "5283:14:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4719,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5283:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4726,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4724,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4722,
                          "name": "actualGasCost",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4702,
                          "src": "5319:13:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 4723,
                          "name": "COST_OF_POST",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4482,
                          "src": "5335:12:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5319:28:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4721,
                      "name": "getTokenValueOfEth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4595,
                      "src": "5300:18:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 4725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5300:48:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5283:65:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4728,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4710,
                        "src": "5481:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 4731,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "5497:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_LegacyTokenPaymaster_$4738",
                              "typeString": "contract LegacyTokenPaymaster"
                            }
                          ],
                          "id": 4730,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5489:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4729,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5489:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4732,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5489:13:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4733,
                        "name": "charge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4720,
                        "src": "5504:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4727,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9966,
                      "src": "5471:9:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 4734,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5471:40:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4735,
                  "nodeType": "ExpressionStatement",
                  "src": "5471:40:16"
                }
              ]
            },
            "baseFunctions": [
              249
            ],
            "documentation": {
              "id": 4695,
              "nodeType": "StructuredDocumentation",
              "src": "4545:460:16",
              "text": " actual charge of user.\n this method will be called just after the user's TX with mode==OpSucceeded|OpReverted (account pays in both cases)\n BUT: if the user changed its balance in a way that will cause  postOp to revert, then it gets called again, after reverting\n the user's TX , back to the state it was before the transaction started (before the validatePaymasterUserOp),\n and the transaction should succeed there."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_postOp",
            "nameLocation": "5019:7:16",
            "overrides": {
              "id": 4704,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5100:8:16"
            },
            "parameters": {
              "id": 4703,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4698,
                  "mutability": "mutable",
                  "name": "mode",
                  "nameLocation": "5038:4:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4737,
                  "src": "5027:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_PostOpMode_$3667",
                    "typeString": "enum IPaymaster.PostOpMode"
                  },
                  "typeName": {
                    "id": 4697,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4696,
                      "name": "PostOpMode",
                      "nameLocations": [
                        "5027:10:16"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3667,
                      "src": "5027:10:16"
                    },
                    "referencedDeclaration": 3667,
                    "src": "5027:10:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PostOpMode_$3667",
                      "typeString": "enum IPaymaster.PostOpMode"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4700,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "5059:7:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4737,
                  "src": "5044:22:16",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4699,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5044:5:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4702,
                  "mutability": "mutable",
                  "name": "actualGasCost",
                  "nameLocation": "5076:13:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4737,
                  "src": "5068:21:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4701,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5068:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5026:64:16"
            },
            "returnParameters": {
              "id": 4705,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5109:0:16"
            },
            "scope": 4738,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4476,
              "name": "BasePaymaster",
              "nameLocations": [
                "1245:13:16"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 361,
              "src": "1245:13:16"
            },
            "id": 4477,
            "nodeType": "InheritanceSpecifier",
            "src": "1245:13:16"
          },
          {
            "baseName": {
              "id": 4478,
              "name": "ERC20",
              "nameLocations": [
                "1260:5:16"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10206,
              "src": "1260:5:16"
            },
            "id": 4479,
            "nodeType": "InheritanceSpecifier",
            "src": "1260:5:16"
          }
        ],
        "canonicalName": "LegacyTokenPaymaster",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4475,
          "nodeType": "StructuredDocumentation",
          "src": "192:1019:16",
          "text": " A sample paymaster that defines itself as a token to pay for gas.\n The paymaster IS the token to use, since a paymaster cannot use an external contract.\n Also, the exchange rate has to be fixed, since it can't reference an external Uniswap or other exchange contract.\n subclass should override \"getTokenValueOfEth\" to provide actual token exchange rate, settable by the owner.\n Known Limitation: this paymaster is exploitable when put into a batch with multiple ops (of different accounts):\n - while a single op can't exploit the paymaster (if postOp fails to withdraw the tokens, the user's op is reverted,\n   and then we know we can withdraw the tokens), multiple ops with different senders (all using this paymaster)\n   in a batch can withdraw funds from 2nd and further ops, forcing the paymaster itself to pay (from its deposit)\n - Possible workarounds are either use a more complex paymaster scheme (e.g. the DepositPaymaster) or\n   to whitelist the account and the called method ids."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4738,
          10206,
          10309,
          10284,
          361,
          8794,
          11111,
          3694
        ],
        "name": "LegacyTokenPaymaster",
        "nameLocation": "1221:20:16",
        "scope": 4739,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 16
}